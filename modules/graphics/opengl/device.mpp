module;
#include <glad/glad.h>

#include <memory>
#include <string>

export module triple.graphics.opengl:device;
import triple.graphics;
import triple.base;
import triple.refl;
import :utils;
import :shader;
import :texture2d;
import :framebuffer;
import :render_pipeline;
import :program;
import :draw_list;
import :buffer;

namespace triple::graphics::opengl {

export class RenderDeviceOpenGL : public RenderDevice {
  public:
    RenderDeviceOpenGL() {
        GLuint vao;
        glGenVertexArrays(1, &vao);
        glBindVertexArray(vao);
    }

    virtual ~RenderDeviceOpenGL() = default;

    virtual Shader*
    create_shader(ShaderStage stage, const std::string& src) override {
        return new ShaderOpenGL(stage, src);
    }
    virtual const refl::Type& shader_type() override {
        return refl::type<ShaderOpenGL>();
    }

    virtual Program* create_program(
        const Shader& frag_shader,
        const Shader& vert_shader
    ) override {
        return new ProgramOpenGL(frag_shader, vert_shader);
    }
    virtual const refl::Type& program_type() override {
        return refl::type<ProgramOpenGL>();
    }

    virtual Buffer* create_buffer(BufferType type, BufferUsage usage) override {
        return new BufferOpenGL(type, usage);
    }
    virtual const refl::Type& buffer_type() override {
        return refl::type<BufferOpenGL>();
    }

    virtual Texture2D* create_texture2d(const TextureDescriptor& desc
    ) override {
        return new Texture2DOpenGL(desc);
    }
    virtual const refl::Type& texture2d_type() override {
        return refl::type<Texture2DOpenGL>();
    }

    virtual DrawList* create_draw_list() override {
        return new DrawListOpenGL();
    }
    virtual const refl::Type& draw_list_type() override {
        return refl::type<DrawListOpenGL>();
    }

    virtual RenderPipeline*
    create_render_pipeline(const RenderPipelineDescriptor& desc) override {
        return new RenderPipelineOpenGL(desc);
    }
    virtual const refl::Type& render_pipeline_type() override {
        return refl::type<RenderPipelineOpenGL>();
    }

    virtual Framebuffer* create_framebuffer(const FramebufferDescriptor& desc
    ) override {
        return new FramebufferOpenGL(desc);
    }
    virtual const refl::Type& frame_buffer_type() override {
        return refl::type<FramebufferOpenGL>();
    }
};

} // namespace triple::graphics::opengl
