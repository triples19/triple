module;
#include <algorithm>
#include <cassert>
#include <cstdint>
#include <functional>
#include <map>
#include <memory>
#include <unordered_map>

export module triple.ecs:world;
import triple.refl;
import triple.base;
import :entity;
import :event;
import :archetype;
import :utils;
import :query;
import :system;
import :resource;
import :schedule;

namespace triple::ecs {

template<class>
struct SystemAddParamHelper;
template<class... Args>
struct SystemAddParamHelper<std::tuple<Args...>> {
    static void run(System& sys) { (sys.add_param<Args>(), ...); }
};

export struct EntityRecord {
    Archetype* m_archetype;
    std::size_t m_row;
};

export class World {
  public:
    World() {
        // create root archetype
        m_root_archetype = create_archetype({});
    }

    ~World() {
        for (auto [_, query] : m_queries) {
            delete query;
        }
        for (auto [_, system] : m_systems) {
            delete system;
        }
        for (Archetype* archetype : m_archetypes) {
            delete archetype;
        }
    }

    Entity entity() {
        Entity id = next_entity_id();
        m_entity_archetype[id] = m_root_archetype;
        m_root_archetype->add_entity(id);
        return id;
    }

    bool has_entity(Entity entity) const {
        // return m_entity_index.find(entity) != m_entity_index.end();
        return m_entity_archetype.find(entity) != m_entity_archetype.end();
    }

    void despawn(Entity entity) {
        assert(has_entity(entity));
        Archetype* archetype = m_entity_archetype[entity];
        archetype->remove_entity(entity);
        m_entity_archetype.erase(entity);
    }

    GenericQuery& query(ComponentVector components) {
        GenericQuery* q = new GenericQuery(components);
        auto [iter, success] = m_queries.insert({q->hash(), q});
        if (success) {
            for (Archetype* archetype : m_archetypes) {
                q->add_if_matches(archetype);
            }
        } else {
            delete q;
        }
        return *iter->second;
    }

    template<class... Args>
    Query<Args...> query() {
        return query({&refl::type<Args>()...});
    }

    System& system() {
        System* s = new System(*this, next_system_id());
        m_systems[s->id()] = s;
        return *s;
    }

    template<class F>
    System& system(F f) {
        using trait = function_traits<F>;
        auto& sys = system();
        // [&]<size_t... ArgIdx>(std::index_sequence<ArgIdx...>) {
        //     // sys.add_params<trait::template arg_type<ArgIdx>...>();
        //     (sys.add_param<trait::template arg_type<ArgIdx>>(), ...);
        // }(std::make_index_sequence<trait::arg_size>());
        SystemAddParamHelper<typename trait::args_tuple>::run(sys);
        sys.callback(f);
        return sys;
    }

    template<class F>
    SystemId add_system(ScheduleId schedule, F f) {
        System& s = system(f);
        get_schedule(schedule).add_system(s.id());
        return s.id();
    }

    void run_system(SystemId id) { m_systems[id]->run(); }

    void add_component(Entity entity, const refl::Type& component) {
        Archetype* archetype = m_entity_archetype[entity];
        auto& next_archetype = archetype->m_edges[component.id()].m_add;
        if (next_archetype == nullptr) {
            ComponentVector components = archetype->components();
            components.push_back(&component);
            next_archetype = get_or_create_archetype(components);
        }
        move_entity(archetype, entity, next_archetype);
    }

    template<class T>
    void add_component(Entity entity) {
        add_component(entity, refl::type<T>());
    }

    void add_component(Entity entity, refl::Ref component) {
        add_component(entity, component.type());
        refl::Ref c = get_component(entity, component.type());
        c.copy(component);
    }

    // template<class T>
    // void add_component(Entity entity, T&& component) {
    //     add_component(entity, refl::Ref {std::forward<T>(component)});
    // }

    void remove_component(Entity entity, const refl::Type& component) {
        Archetype* archetype = m_entity_archetype[entity];
        Archetype*& next_archetype =
            archetype->m_edges[component.id()].m_remove;
        if (next_archetype == nullptr) {
            ComponentVector components = archetype->components();
            components.erase(
                std::remove(components.begin(), components.end(), &component),
                components.end()
            );
            next_archetype = get_or_create_archetype(components);
        }
        move_entity(archetype, entity, next_archetype);
    }

    template<class T>
    void remove_component(Entity entity) {
        remove_component(entity, refl::type<T>());
    }

    refl::Ref get_component(Entity entity, const refl::Type& component_type) {
        return refl::Ref {
            m_entity_archetype[entity]->get_component(entity, component_type),
            component_type
        };
        // auto& record = m_entity_index[entity];
        // auto* archetype = record.m_archetype;
        // auto iter = std::ranges::find(archetype->m_components,
        // &component_type); if (iter == archetype->m_components.end()) {
        //     return nullptr;
        // }
        // auto& column =
        //     archetype->m_columns[iter - archetype->m_components.begin()];
        // return refl::Ref {column.get(record.m_row), component_type};
    }

    template<class T>
    T& get_component(Entity entity) {
        return get_component(entity, refl::type<T>()).template value<T>();
    }

    bool has_component(Entity entity, const refl::Type& component_type) {
        return m_entity_archetype[entity]->has_component(component_type);
        // auto& record = m_entity_index[entity];
        // auto* archetype = record.m_archetype;
        // auto iter = std::ranges::find(archetype->m_components,
        // &component_type); return iter != archetype->m_components.end();
    }

    template<class T>
    bool has_component(Entity entity) {
        return has_component(entity, refl::type<T>());
    }

    Archetype* get_archetype(ComponentVector components) {
        std::ranges::sort(components);
        auto iter = m_archetype_map.find(TypeVectorHasher {}(components));
        if (iter != m_archetype_map.end()) {
            return iter->second;
        } else {
            return nullptr;
        }
    }

    void add_event(const refl::Type& event_type) {
        if (m_events.find(event_type.id()) != m_events.end())
            return;
        m_events[event_type.id()] = std::make_unique<Events>(event_type);
    }

    template<class E>
    void add_event() {
        add_event(refl::type<E>());
    }

    Events& get_events(const refl::Type& event_type) {
        assert(m_events.find(event_type.id()) != m_events.end());
        return *m_events[event_type.id()];
    }

    template<class E>
    Events& get_events() {
        return get_events(refl::type<E>());
    }

    // void add_resource(const refl::Type& resource) {
    // m_resources[resource.type().id()] = resource; }

    template<class R>
    void add_resource() {
        using RawR = std::remove_cvref_t<R>;
        log::trace("Adding resource: {}", refl::type<RawR>().name());
        m_resources.emplace(refl::type<R>().id(), R {});
    }

    template<class R>
    void add_resource(R&& resource) {
        using RawR = std::remove_cvref_t<R>;
        log::trace("Adding resource: {}", refl::type<RawR>().name());
        m_resources.emplace(refl::type<RawR>().id(), std::forward<R>(resource));
    }

    GenericResource get_resource(const refl::Type& resource_type) {
        if (m_resources.find(resource_type.id()) == m_resources.end()) {
            log::error("Resource not found: {}", resource_type.name());
        }
        return GenericResource {m_resources[resource_type.id()].ref()};
    }

    template<class R>
    Resource<R> get_resource() {
        return get_resource(refl::type<R>());
    }

    void add_schedule(ScheduleId id) {
        m_schedules[id] = std::make_unique<Schedule>(id);
    }

    Schedule& get_schedule(ScheduleId id) {
        assert(m_schedules.find(id) != m_schedules.end());
        return *m_schedules[id];
    }

    void run_schedule(ScheduleId id) {
        auto& schedule = get_schedule(id);
        for (SystemId system_id : schedule.systems()) {
            run_system(system_id);
            run_commands();
        }
    }

    std::vector<Archetype*> archetypes() { return m_archetypes; }

    void add_command(std::function<void(World&)> command) {
        m_commands.push_back(command);
    }

    void run_commands() {
        for (auto& command : m_commands) {
            command(*this);
        }
        m_commands.clear();
    }

  private:
    Entity next_entity_id() {
        static Entity id = 0;
        return ++id;
    }

    ArchetypeId next_archetype_id() {
        static ArchetypeId id = 0;
        return ++id;
    }

    SystemId next_system_id() {
        static SystemId id = 0;
        return ++id;
    }

    Archetype* get_or_create_archetype(ComponentVector components) {
        Archetype* archetype = get_archetype(components);
        if (archetype == nullptr) {
            archetype = create_archetype(components);
        }
        return archetype;
    }

    Archetype* create_archetype(const ComponentVector& components) {
        Archetype* archetype = new Archetype(next_archetype_id(), components);
        m_archetypes.push_back(archetype);

        // add to map
        m_archetype_map[archetype->hash()] = archetype;
        // refresh query list
        for (auto& [_, query] : m_queries) {
            query->add_if_matches(archetype);
        }
        return archetype;
    }

    std::size_t move_entity(Archetype* from, Entity entity, Archetype* to) {
        to->add_entity(entity);
        for (auto component : to->components()) {
            if (from->has_component(*component)) {
                to->set_component(
                    entity,
                    *component,
                    from->get_component(entity, *component)
                );
            }
        }
        from->remove_entity(entity);
        m_entity_archetype[entity] = to;
        return 0;
    }

  private:
    std::vector<Archetype*> m_archetypes;
    Archetype* m_root_archetype;

    // NOTE: Strange compiler internal error happening here if I use
    // std::unordered_map So I'm using std::map instead for now "fatal error
    // C1001: Internal compiler error. (compiler file 'msc1.cpp', line 1587)"

    std::map<std::size_t, Archetype*> m_entity_archetype;
    // std::map<std::size_t, EntityRecord> m_entity_index;
    std::map<std::size_t, Archetype*> m_archetype_map;
    std::map<std::size_t, GenericQuery*> m_queries;
    std::map<std::size_t, System*> m_systems;
    std::map<std::size_t, std::unique_ptr<Events>> m_events;
    std::map<std::size_t, refl::Value> m_resources;
    std::map<std::size_t, std::unique_ptr<Schedule>> m_schedules;
    std::vector<std::function<void(World&)>> m_commands;
};

} // namespace triple::ecs
