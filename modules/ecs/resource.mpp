export module triple.ecs:resource;
import triple.refl;
import triple.base;

namespace triple::ecs {

export class GenericResource {
  public:
    GenericResource(refl::Ref ref) : m_ref(ref) {};

    refl::Ref get() const { return m_ref; }

  private:
    refl::Ref m_ref;
};

export template<class T>
class Resource : GenericResource {
  public:
    using ResourceType = T;
    Resource() : GenericResource(refl::type<T>()) {};
    Resource(const GenericResource& resource) :
        GenericResource(resource.get()) {};

    T& get() { return GenericResource::get().template value<T>(); }
    const T& get() const { return GenericResource::get().template value<T>(); }
    T& operator*() { return get(); }
    const T& operator*() const { return get(); }
    T* operator->() { return &get(); }
    const T* operator->() const { return &get(); }
};

export class GenericLocalResource {
  public:
    GenericLocalResource(refl::Ref ref) : m_ref(ref) {};

    refl::Ref get() const { return m_ref; }

  private:
    refl::Ref m_ref;
};

export template<class T>
class LocalResource : GenericLocalResource {
  public:
    using ResourceType = T;
    LocalResource() : GenericLocalResource(refl::type<T>()) {};
    LocalResource(const GenericLocalResource& resource) :
        GenericLocalResource(resource.get()) {};

    T& get() { return GenericLocalResource::get().template value<T>(); }
    const T& get() const {
        return GenericLocalResource::get().template value<T>();
    }
    T& operator*() { return get(); }
    const T& operator*() const { return get(); }
    T* operator->() { return &get(); }
    const T* operator->() const { return &get(); }
};

} // namespace triple::ecs
