module;
#include <algorithm>
#include <cstdint>
#include <cstdlib>
#include <functional>
#include <string>
#include <unordered_map>
#include <vector>

export module triple.ecs:system;
import triple.base;
import triple.refl;
import :commands;
import :query;
import :archetype;
import :event;
import :resource;

namespace triple::ecs {

export using SystemId = std::uint32_t;
export class World;
export class System;
export class Commands;

export class SystemCommands {
  public:
    SystemCommands(System& system);
    GenericQuery& query(const std::string& name = "");
    GenericEventReader& event_reader(const refl::Type& event_type);
    GenericEventWriter& event_writer(const refl::Type& event_type);
    GenericResource& resource(const refl::Type& resource_type);
    Commands commands();

    template<class T>
    decltype(auto) get_param();

  private:
    System& m_system;
};

template<class>
struct SystemCallbackHelper;
template<class... Args>
struct SystemCallbackHelper<std::tuple<Args...>> {
    template<class F>
    static void run(SystemCommands& commands, System& sys, F f);
};

export class System {
    friend class SystemCommands;
    template<class>
    friend struct SystemCallbackHelper;

  public:
    // using Callback = void (*)(SystemCommands&);
    using Callback = std::function<void(SystemCommands&)>;

    System(World& world, SystemId id);

    System& callback(Callback func) {
        m_callback = func;
        return *this;
    }

    template<class F>
    System& callback(F f) {
        using trait = function_traits<F>;
        m_callback = [f, this](SystemCommands& commands) {
            // [f,
            //  &commands,
            //  this]<size_t... ArgIdx>(std::index_sequence<ArgIdx...>) {
            //     if constexpr (std::is_same_v<
            //                       typename trait::return_type,
            //                       void>) {
            //         f(commands.get_param<trait::template
            //         arg_type<ArgIdx>>()...
            //         );
            //     } else {
            //         this->m_out =
            //             f(commands.get_param<trait::template
            //             arg_type<ArgIdx>>(
            //             )...);
            //     }
            // }(std::make_index_sequence<trait::arg_size>());
            SystemCallbackHelper<typename trait::args_tuple>::run(
                commands,
                *this,
                f
            );
        };
        return *this;
    }

    System& add_query(const std::string& name, ComponentVector types);
    System& add_event_reader(const refl::Type& event_type);
    System& add_event_wrtier(const refl::Type& event_type);
    System& add_resource(const refl::Type& resource_type);

    template<class R>
    System& add_local_resource() {
        auto& type = refl::type<R>();
        if (m_local_resources.find(type.id()) == m_local_resources.end()) {
            m_local_resources[type.id()] = refl::Value(R {});
        }
        return *this;
    }

    template<class... Args>
    System& add_query(const std::string& name = "") {
        return add_query(name, {&refl::type<Args>()...});
    }

    template<class T>
    System& add_param() {
        using RawT = std::remove_cvref_t<T>;
        if constexpr (is_specialization<RawT, Query>) {
            add_query(std::to_string(T::hash()), T::components());
        } else if constexpr (is_specialization<RawT, EventReader>) {
            add_event_reader(refl::type<typename T::EventType>());
        } else if constexpr (is_specialization<RawT, EventWriter>) {
            add_event_wrtier(refl::type<typename T::EventType>());
        } else if constexpr (is_specialization<RawT, Resource>) {
            add_resource(refl::type<typename T::ResourceType>());
        } else if constexpr (is_specialization<RawT, LocalResource>) {
            add_local_resource<typename T::ResourceType>();
        }
        return *this;
    }

    template<class... Args>
    System& add_params() {
        (add_param<Args>(), ...);
        return *this;
    }

    void run() { m_callback(m_commands); }

    refl::Ref get_output() { return m_out; }

    SystemId id() const { return m_id; }

    World& world() { return m_world; }

  private:
    World& m_world;
    SystemId m_id;
    Callback m_callback;
    SystemCommands m_commands;
    refl::Ref m_out;
    std::unordered_map<std::string, GenericQuery*> m_queries;
    std::unordered_map<refl::TypeId, GenericEventReader> m_event_readers;
    std::unordered_map<refl::TypeId, GenericEventWriter> m_event_writers;
    std::unordered_map<refl::TypeId, GenericResource> m_resources;
    std::unordered_map<refl::TypeId, refl::Value> m_local_resources;
};

template<class T>
decltype(auto) SystemCommands::get_param() {
    using RawT = std::remove_cvref_t<T>;
    if constexpr (is_specialization<RawT, Query>) {
        return RawT(query(std::to_string(RawT::hash())));
    } else if constexpr (is_specialization<RawT, EventReader>) {
        return event_reader(refl::type<typename RawT::EventType>());
    } else if constexpr (is_specialization<RawT, EventWriter>) {
        return event_writer(refl::type<typename RawT::EventType>());
    } else if constexpr (is_specialization<RawT, Resource>) {
        return resource(refl::type<typename RawT::ResourceType>());
    } else if constexpr (is_specialization<RawT, LocalResource>) {
        return GenericLocalResource(
            m_system
                .m_local_resources[refl::type<typename RawT::ResourceType>().id(
                )]
                .ref()
        );
    } else if constexpr (std::same_as<RawT, Commands>) {
        return commands();
    }
}

template<class... Args>
template<class F>
void SystemCallbackHelper<std::tuple<Args...>>::run(
    SystemCommands& commands,
    System& sys,
    F f
) {
    if constexpr (std::is_same_v<
                      typename function_traits<F>::return_type,
                      void>) {
        f(commands.get_param<Args>()...);
    } else {
        sys.m_out = f(commands.get_param<Args>()...);
    }
}

} // namespace triple::ecs
