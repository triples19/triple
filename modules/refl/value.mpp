module;
#include <cassert>
#include <memory>

export module triple.refl:value;
import :ref;
import :type;

namespace triple::refl {

export class Value;

export struct ValueHandlerBase {
    virtual ~ValueHandlerBase() = default;
    virtual Ref ref(const Value& val) const = 0;
    virtual void create(Value& val, Ref ref) const = 0;
    virtual void destroy(Value& val) const = 0;
    virtual void copy(Value& val, const Value& other) const = 0;
    virtual void move(Value& val, Value& other) const = 0;
    virtual bool empty() const = 0;
};

export struct ValueHandlerEmpty : public ValueHandlerBase {
    virtual Ref ref(const Value& val) const override { return Ref(); }
    virtual void create(Value& val, Ref ref) const override {}
    virtual void destroy(Value& val) const override {}
    virtual void copy(Value& val, const Value& other) const override {}
    virtual void move(Value& val, Value& other) const override {}
    virtual bool empty() const override { return true; }
};

export class Value {
  public:
    Value() : m_handler(std::make_unique<ValueHandlerEmpty>()) {}

    template<typename T>
    Value(const T& obj);

    ~Value() { m_handler->destroy(*this); }

    Value(const Value& other) : Value() { other.m_handler->copy(*this, other); }

    Value(Value&& other) : Value() { other.m_handler->move(*this, other); }

    Value& operator=(const Value& rhs) {
        if (m_handler == rhs.m_handler)
            m_handler->copy(*this, rhs);
        else
            Value(rhs).swap(*this);
        return *this;
    }

    Value& operator=(Ref ref) {
        m_handler->create(*this, ref);
        return *this;
    }

    Value& swap(Value& other) {
        m_handler.swap(other.m_handler);
        std::swap(m_storage, other.m_storage);
        return *this;
    }

    Ref ref() const { return m_handler->ref(*this); }

    Type type() const { return ref().type(); }

    bool empty() const { return m_handler->empty(); }

    template<typename T>
    T& cast() {
        return *static_cast<T*>((void*)&m_storage);
    }

    template<typename T>
    const T& cast() const {
        return *static_cast<const T*>((void*)&m_storage);
    }

    std::unique_ptr<ValueHandlerBase> m_handler;
    struct Storage {
        uint8_t m_bytes[sizeof(void*) * 3];
        void* get_ptr() const {
            void* ptr = 0;
            memcpy(&ptr, m_bytes, sizeof(void*));
            return ptr;
        }
        void set_ptr(void* ptr) { memcpy(m_bytes, &ptr, sizeof(void*)); }
    } m_storage;
};

export template<class T>
struct ValueHandlerHeap : public ValueHandlerBase {
    virtual Ref ref(const Value& val) const override {
        return Ref(static_cast<const T*>(val.m_storage.get_ptr()));
    }
    virtual void create(Value& val, Ref ref) const override {
        val.m_storage.set_ptr(new T(ref.value<T>()));
    }
    virtual void destroy(Value& val) const override {
        delete static_cast<T*>(val.m_storage.get_ptr());
    }
    virtual void copy(Value& val, const Value& other) const override {
        create(val, ref(other));
        val.m_handler = std::make_unique<ValueHandlerHeap<T>>();
    }
    virtual void move(Value& val, Value& other) const override {
        val.swap(other);
    }
    virtual bool empty() const override { return false; }
};

export template<class T>
struct ValueHandlerStack : public ValueHandlerBase {
    virtual Ref ref(const Value& val) const override {
        return Ref(static_cast<const T*>((void*)&val.m_storage));
    }
    virtual void create(Value& val, Ref ref) const override {
        new ((void*)&val.m_storage) T(ref.value<T>());
    }
    virtual void destroy(Value& val) const override {
        static_cast<T*>((void*)&val.m_storage)->~T();
    }
    virtual void copy(Value& val, const Value& other) const override {
        create(val, ref(other));
        val.m_handler = std::make_unique<ValueHandlerStack<T>>();
    }
    virtual void move(Value& val, Value& other) const override {
        val.swap(other);
    }
    virtual bool empty() const override { return false; }
};

// std::unique_ptr<T>
export template<class T>
struct ValueHandlerUniquePtr : public ValueHandlerBase {
    virtual Ref ref(const Value& val) const override {
        return Ref(static_cast<const T*>((void*)&val.m_storage));
    }
    virtual void create(Value& val, Ref ref) const override {
        new ((void*)&val.m_storage)
            std::unique_ptr<T>(std::move(ref.value<std::unique_ptr<T>>()));
    }
    virtual void destroy(Value& val) const override {
        std::unique_ptr<T>& ptr =
            *static_cast<std::unique_ptr<T>*>((void*)&val.m_storage);
        ptr.reset();
    }
    virtual void copy(Value& val, const Value& other) const override {
        assert(false);
    }
    virtual void move(Value& val, Value& other) const override {
        val.swap(other);
    }
    virtual bool empty() const override { return false; }
};

template<class T>
concept small_object = sizeof(T) <= sizeof(void*) * 3;

export template<class T>
struct ValueHandler : public ValueHandlerHeap<T> {};

export template<small_object T>
struct ValueHandler<T> : public ValueHandlerStack<T> {};

export template<class T>
struct ValueHandler<std::unique_ptr<T>> : public ValueHandlerUniquePtr<T> {};

template<class T>
Value::Value(const T& obj) {
    m_handler = std::make_unique<ValueHandler<T>>();
    m_handler->create(*this, Ref(obj));
}

} // namespace triple::refl
